# Maximum Candies You Can Get from Boxes.

You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:

status[i] is 1 if the ith box is open and 0 if the ith box is closed,
candies[i] is the number of candies in the ith box,
keys[i] is a list of the labels of the boxes you can open after opening the ith box.
containedBoxes[i] is a list of the boxes you found inside the ith box.
You are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.

## Solution

It is possible to represent this problem as a graph. We start at initialBoxes nodes. For each node, it is possible to find the neighbors (containedBoxes). Also, we collect the keys from the opened boxes. If the current node (box) is opened or we have a key we just add candies to our bucket. Otherwise, we collect nodes in the queue.

### Steps

1. Add to the queue all initial boxes.
2. Implement BFS. If the current box is opened or we have a key then collect candies. If the current box is closed then add the current box to the second queue.

Time complexity: O(n).

Space complexity: O(n).